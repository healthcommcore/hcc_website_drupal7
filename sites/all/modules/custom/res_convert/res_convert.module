<?php
// $Id$

/**
 * Implements hook_menu().
 */
function res_convert_menu() {
  $items['tools/resconvert'] = array(
    'title' => 'Image resolution converter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('res_convert_form'),
    'access arguments' => array('access resolution converter'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function res_convert_permission() {
  $permissions = array(
    'access resolution converter' => array(
      'title' => t('Access Resolution Converter'),
      'description' => t('Permission to convert resolution of image files'),
      'restrict access' => FALSE,
    ),
  );
  return $permissions;
}


function res_convert_form($form, &$form_state) {
	$file_types = array(
		0 => t('tiff'),
		1 => t('eps'),
		2 => t('jpg'),
	);
	$resolution = array(
		0 => t('300'),
		1 => t('600'),
		2 => t('1200'),
	);

	$form['#attributes']['enctype'] = "multipart/form-data";
	//$form['#attributes']['class'][] = 'res-convert';
	$form['image'] = array(
		'#type' => 'managed_file',
		'#name' => 'res_convert_form_image',
		'#title' => t('Image to convert'),
		'#description' => t('Choose an image'),
		'#upload_location' => 'public://res_convert'
	);
	
	$form['filetype'] = array(
		'#type' => 'radios',
		'#title' => t('What file type do you need?'),
		'#default_value' => 0,
		'#options' => $file_types,
		'#description' => t("Often, publications request that files be of a certain type. If you don't know the type or it was not specified, use tiff."),
	);
		
	$form['res'] = array(
		'#type' => 'radios',
		'#title' => t('What image resolution?'),
		'#default_value' => 1,
		'#options' => $resolution,
		'#description' => t("If the publication you are submitting to specified a required image resolution, select from the list. If not, select 600"),
	);

	$form['convert'] = array(
		'#type' => 'submit',
		'#name' => 'convert_image',
		'#value' => t('Convert image'),
		'#attributes' => array(
			'class' => array('btn btn-default btn-lg'),
		),
		//'#submit' => array('res_convert_execute'),
		'#ajax' => array(
			'callback' => 'res_convert_callback',
			'event' => 'click',
			'wrapper' => 'resconvert_success',
			'effect' => 'fade',
			'progress' => array(
				'type' => 'throbber',
				'message' => t('Processing image, please wait...'),
			),
		),
		/*
		*/
	);

	$form['success'] = array(
		//'#type' => 'item',
		'#prefix' => '<div id="resconvert_sucess">',
		'#markup' => '<p>This is a test</p>',
		'#suffix' => '</div>',
	);

/*
*/
	if ( isset($form_state['input']) ) {
		dpm($form_state);
		//$form['success']['#markup'] = '<p>This is a submit test</p>';
	}

	return $form;
}

function res_convert_callback($form, $form_state) {
/*
	$output = '<p>Success!</p>';
	$commands = array(
		ajax_command_append('#resconvert_success', $output),
	);
*/
	//ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
	return $form['success'];
}

function res_convert_execute($form, &$form_state) {
	$num = 10000000;
	$res = 0;
	for ($i = 0; $i < $num; $i++) {
		$res = $i;
	}
	$form['success']['#markup'] = 'Success!';
}

/*
function res_convert_layout() {
  return theme('res_convert_layout');
}
*/

/**
 * Implements hook_theme().
function res_convert_theme() {
  return array(
    'res_convert_layout' => array(
      'template' => 'res-convert-layout',
    ),
  );
}
*/
